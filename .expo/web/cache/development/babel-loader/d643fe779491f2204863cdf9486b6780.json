{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { createDrawerNavigator, DrawerContentScrollView } from \"@react-navigation/drawer\";\nimport Animated from \"react-native-reanimated\";\nimport { connect } from \"react-redux\";\nimport { setSelectedTab as _setSelectedTab } from \"../stores/tab/tabActions\";\nimport { MainLayout } from \"../screens\";\nimport { COLORS, FONTS, SIZES, constants, icons, dummyData } from \"../constants\";\nimport react from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Drawer = createDrawerNavigator();\n\nvar CustomDrawerItem = function CustomDrawerItem(_ref) {\n  var label = _ref.label,\n      icon = _ref.icon,\n      isFocused = _ref.isFocused,\n      onPress = _ref.onPress;\n  return _jsxs(TouchableOpacity, {\n    style: {\n      flexDirection: \"row\",\n      height: 40,\n      marginBottom: SIZES.base,\n      alignItems: \"center\",\n      paddingLeft: SIZES.radius,\n      borderRadius: SIZES.base,\n      backgroundColor: isFocused ? COLORS.transparentBlack1 : null\n    },\n    onPress: onPress,\n    children: [_jsx(Image, {\n      source: icon,\n      style: {\n        width: 20,\n        height: 20,\n        tintColor: COLORS.black\n      }\n    }), _jsx(Text, {\n      style: _objectSpread({\n        marginLeft: 15,\n        color: COLORS.black\n      }, FONTS.h3),\n      children: label\n    })]\n  });\n};\n\nvar CustomDrawerContent = function CustomDrawerContent(_ref2) {\n  var _dummyData$myProfile, _dummyData$myProfile2;\n\n  var navigation = _ref2.navigation,\n      selectedTab = _ref2.selectedTab,\n      setSelectedTab = _ref2.setSelectedTab;\n  return _jsx(DrawerContentScrollView, {\n    scrollEnabled: true,\n    contentContainerStyle: {\n      flex: 1,\n      backgroundColor: COLORS.primary\n    },\n    children: _jsxs(View, {\n      style: {\n        flex: 1,\n        paddingHorizontal: SIZES.radius\n      },\n      children: [_jsx(View, {\n        style: {\n          alignItems: \"flex-start\",\n          justifyContent: \"center\"\n        },\n        children: _jsx(TouchableOpacity, {\n          style: {\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          },\n          onPress: function onPress() {\n            return navigation.closeDrawer();\n          },\n          children: _jsx(Image, {\n            source: icons.cross,\n            style: {\n              height: 35,\n              width: 35,\n              tintColor: COLORS.black\n            }\n          })\n        })\n      }), _jsxs(TouchableOpacity, {\n        style: {\n          flexDirection: \"row\",\n          marginTop: SIZES.radius,\n          alignItems: \"center\"\n        },\n        onPress: function onPress() {\n          return console.log(\"Profile\");\n        },\n        children: [_jsx(Image, {\n          source: (_dummyData$myProfile = dummyData.myProfile) == null ? void 0 : _dummyData$myProfile.profile_image,\n          style: {\n            width: 50,\n            height: 50,\n            borderRadius: SIZES.radius\n          }\n        }), _jsxs(View, {\n          style: {\n            marginLeft: SIZES.radius\n          },\n          children: [_jsx(Text, {\n            style: _objectSpread({\n              color: COLORS.black\n            }, FONTS.h3),\n            children: (_dummyData$myProfile2 = dummyData.myProfile) == null ? void 0 : _dummyData$myProfile2.name\n          }), _jsx(Text, {\n            style: _objectSpread({\n              color: COLORS.black\n            }, FONTS.body4),\n            children: \"View Your Profile\"\n          })]\n        })]\n      }), _jsxs(View, {\n        style: {\n          flex: 1,\n          marginTop: SIZES.padding\n        },\n        children: [_jsx(CustomDrawerItem, {\n          label: constants.screens.home,\n          icon: icons.home,\n          isFocused: selectedTab == constants.screens.home,\n          onPress: function onPress() {\n            setSelectedTab(constants.screens.home);\n            navigation.navigate(\"MainLayout\");\n          }\n        }), _jsx(CustomDrawerItem, {\n          label: constants.screens.my_wallet,\n          icon: icons.wallet\n        }), _jsx(CustomDrawerItem, {\n          label: constants.screens.notification,\n          icon: icons.notification,\n          isFocused: selectedTab == constants.screens.notification,\n          onPress: function onPress() {\n            setSelectedTab(constants.screens.notification);\n            navigation.navigate(\"MainLayout\");\n          }\n        }), _jsx(CustomDrawerItem, {\n          label: constants.screens.favourite,\n          icon: icons.favourite,\n          isFocused: selectedTab == constants.screens.favourite,\n          onPress: function onPress() {\n            setSelectedTab(constants.screens.favourite);\n            navigation.navigate(\"MainLayout\");\n          }\n        }), _jsx(View, {\n          style: {\n            height: 1,\n            marginVertical: SIZES.radius,\n            marginLeft: SIZES.radius,\n            backgroundColor: COLORS.lightGray1\n          }\n        }), _jsx(CustomDrawerItem, {\n          label: \"Track Your Order\",\n          icon: icons.location\n        }), _jsx(CustomDrawerItem, {\n          label: \"Coupens\",\n          icon: icons.coupon\n        }), _jsx(CustomDrawerItem, {\n          label: \"Settings\",\n          icon: icons.setting\n        }), _jsx(CustomDrawerItem, {\n          label: \"Invite a Friend\",\n          icon: icons.profile\n        }), _jsx(CustomDrawerItem, {\n          label: \"Help Center\",\n          icon: icons.help\n        })]\n      }), _jsx(View, {\n        style: {\n          marginBottom: null\n        },\n        children: _jsx(CustomDrawerItem, {\n          label: \"Logout\",\n          icon: icons.logout\n        })\n      })]\n    })\n  });\n};\n\nvar CustomDrawer = function CustomDrawer(_ref3) {\n  var selectedTab = _ref3.selectedTab,\n      setSelectedTab = _ref3.setSelectedTab;\n\n  var _react$useState = react.useState(new Animated.Value(0)),\n      _react$useState2 = _slicedToArray(_react$useState, 2),\n      progress = _react$useState2[0],\n      setProgress = _react$useState2[1];\n\n  var scale = Animated.interpolateNode(progress, {\n    inputRange: [0, 1],\n    outputRange: [1, 0.8]\n  });\n  var borderRadius = Animated.interpolateNode(progress, {\n    inputRange: [0, 1],\n    outputRange: [0, 26]\n  });\n  var animatedStyle = {\n    borderRadius: borderRadius,\n    transform: [{\n      scale: scale\n    }]\n  };\n  return _jsx(View, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(Drawer.Navigator, {\n      drawerType: \"slide\",\n      overlayColor: \"transparent\",\n      drawerStyle: {\n        flex: 1,\n        width: \"65%\",\n        paddingRight: 20,\n        backgroundColor: \"transparent\"\n      },\n      sceneContainerStyle: {\n        backgroundColor: \"transparent\"\n      },\n      screenOptions: {\n        headerShown: false\n      },\n      initialRouteName: \"MainLayout\",\n      drawerContent: function drawerContent(props) {\n        setTimeout(function () {\n          setProgress(props.progress);\n        }, 0);\n        return _jsx(CustomDrawerContent, {\n          navigation: props.navigation,\n          selectedTab: selectedTab,\n          setSelectedTab: setSelectedTab\n        });\n      },\n      children: _jsx(Drawer.Screen, {\n        name: \"MainLayout\",\n        children: function children(props) {\n          return _jsx(MainLayout, _objectSpread(_objectSpread({}, props), {}, {\n            drawerAnimationStyle: animatedStyle\n          }));\n        }\n      })\n    })\n  });\n};\n\nfunction mapStateToProps(state) {\n  return {\n    selectedTab: state.tabReducer.selectedTab\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setSelectedTab: function setSelectedTab(selectedTab) {\n      return dispatch(_setSelectedTab(selectedTab));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDrawer);","map":{"version":3,"sources":["C:/Users/nazir/OneDrive/Desktop/FoodDelivery (19.03.2022)/navigation/CustomDrawer.js"],"names":["React","createDrawerNavigator","DrawerContentScrollView","Animated","connect","setSelectedTab","MainLayout","COLORS","FONTS","SIZES","constants","icons","dummyData","react","Drawer","CustomDrawerItem","label","icon","isFocused","onPress","flexDirection","height","marginBottom","base","alignItems","paddingLeft","radius","borderRadius","backgroundColor","transparentBlack1","width","tintColor","black","marginLeft","color","h3","CustomDrawerContent","navigation","selectedTab","flex","primary","paddingHorizontal","justifyContent","closeDrawer","cross","marginTop","console","log","myProfile","profile_image","name","body4","padding","screens","home","navigate","my_wallet","wallet","notification","favourite","marginVertical","lightGray1","location","coupon","setting","profile","help","logout","CustomDrawer","useState","Value","progress","setProgress","scale","interpolateNode","inputRange","outputRange","animatedStyle","transform","paddingRight","headerShown","props","setTimeout","mapStateToProps","state","tabReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Text, View, TouchableOpacity, Image } from \"react-native\";\r\nimport {\r\n  createDrawerNavigator,\r\n  DrawerContentScrollView,\r\n} from \"@react-navigation/drawer\";\r\n\r\nimport Animated from \"react-native-reanimated\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSelectedTab } from \"../stores/tab/tabActions\";\r\n\r\nimport { MainLayout } from \"../screens\";\r\nimport {\r\n  COLORS,\r\n  FONTS,\r\n  SIZES,\r\n  constants,\r\n  icons,\r\n  dummyData,\r\n} from \"../constants\";\r\nimport react from \"react\";\r\n\r\nconst Drawer = createDrawerNavigator();\r\n\r\nconst CustomDrawerItem = ({ label, icon, isFocused, onPress }) => {\r\n  return (\r\n    <TouchableOpacity\r\n      style={{\r\n        flexDirection: \"row\",\r\n        height: 40,\r\n        marginBottom: SIZES.base,\r\n        alignItems: \"center\",\r\n        paddingLeft: SIZES.radius,\r\n        borderRadius: SIZES.base,\r\n        backgroundColor: isFocused ? COLORS.transparentBlack1 : null,\r\n      }}\r\n      onPress={onPress}\r\n    >\r\n      <Image\r\n        source={icon}\r\n        style={{\r\n          width: 20,\r\n          height: 20,\r\n          tintColor: COLORS.black,\r\n        }}\r\n      />\r\n      <Text\r\n        style={{\r\n          marginLeft: 15,\r\n          color: COLORS.black,\r\n          ...FONTS.h3,\r\n        }}\r\n      >\r\n        {label}\r\n      </Text>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst CustomDrawerContent = ({ navigation, selectedTab, setSelectedTab }) => {\r\n  return (\r\n    <DrawerContentScrollView\r\n      scrollEnabled={true}\r\n      contentContainerStyle={{\r\n        flex: 1,\r\n        backgroundColor: COLORS.primary,\r\n      }}\r\n    >\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          paddingHorizontal: SIZES.radius,\r\n        }}\r\n      >\r\n        {/* Close */}\r\n        <View\r\n          style={{\r\n            alignItems: \"flex-start\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <TouchableOpacity\r\n            style={{\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n            onPress={() => navigation.closeDrawer()}\r\n          >\r\n            <Image\r\n              source={icons.cross}\r\n              style={{\r\n                height: 35,\r\n                width: 35,\r\n                tintColor: COLORS.black,\r\n              }}\r\n            />\r\n          </TouchableOpacity>\r\n        </View>\r\n        {/* Profile */}\r\n        <TouchableOpacity\r\n          style={{\r\n            flexDirection: \"row\",\r\n            marginTop: SIZES.radius,\r\n            alignItems: \"center\",\r\n          }}\r\n          onPress={() => console.log(\"Profile\")}\r\n        >\r\n          <Image\r\n            source={dummyData.myProfile?.profile_image}\r\n            style={{\r\n              width: 50,\r\n              height: 50,\r\n              borderRadius: SIZES.radius,\r\n            }}\r\n          />\r\n          <View style={{ marginLeft: SIZES.radius }}>\r\n            <Text style={{ color: COLORS.black, ...FONTS.h3 }}>\r\n              {dummyData.myProfile?.name}\r\n            </Text>\r\n            <Text style={{ color: COLORS.black, ...FONTS.body4 }}>\r\n              View Your Profile\r\n            </Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n        {/* Drawer items */}\r\n        <View\r\n          style={{\r\n            flex: 1,\r\n            marginTop: SIZES.padding,\r\n          }}\r\n        >\r\n          <CustomDrawerItem\r\n            label={constants.screens.home}\r\n            icon={icons.home}\r\n            isFocused={selectedTab == constants.screens.home}\r\n            onPress={() => {\r\n              setSelectedTab(constants.screens.home);\r\n              navigation.navigate(\"MainLayout\");\r\n            }}\r\n          />\r\n          <CustomDrawerItem\r\n            label={constants.screens.my_wallet}\r\n            icon={icons.wallet}\r\n          />\r\n          <CustomDrawerItem\r\n            label={constants.screens.notification}\r\n            icon={icons.notification}\r\n            isFocused={selectedTab == constants.screens.notification}\r\n            onPress={() => {\r\n              setSelectedTab(constants.screens.notification);\r\n              navigation.navigate(\"MainLayout\");\r\n            }}\r\n          />\r\n          <CustomDrawerItem\r\n            label={constants.screens.favourite}\r\n            icon={icons.favourite}\r\n            isFocused={selectedTab == constants.screens.favourite}\r\n            onPress={() => {\r\n              setSelectedTab(constants.screens.favourite);\r\n              navigation.navigate(\"MainLayout\");\r\n            }}\r\n          />\r\n          {/* Line Divider*/}\r\n          <View\r\n            style={{\r\n              height: 1,\r\n              marginVertical: SIZES.radius,\r\n              marginLeft: SIZES.radius,\r\n              backgroundColor: COLORS.lightGray1,\r\n            }}\r\n          />\r\n          <CustomDrawerItem label=\"Track Your Order\" icon={icons.location} />\r\n          <CustomDrawerItem label=\"Coupens\" icon={icons.coupon} />\r\n          <CustomDrawerItem label=\"Settings\" icon={icons.setting} />\r\n          <CustomDrawerItem label=\"Invite a Friend\" icon={icons.profile} />\r\n          <CustomDrawerItem label=\"Help Center\" icon={icons.help} />\r\n        </View>\r\n        <View\r\n          style={{\r\n            marginBottom: null,\r\n          }}\r\n        >\r\n          <CustomDrawerItem label=\"Logout\" icon={icons.logout} />\r\n        </View>\r\n      </View>\r\n    </DrawerContentScrollView>\r\n  );\r\n};\r\nconst CustomDrawer = ({ selectedTab, setSelectedTab }) => {\r\n  const [progress, setProgress] = react.useState(new Animated.Value(0));\r\n\r\n  const scale = Animated.interpolateNode(progress, {\r\n    inputRange: [0, 1],\r\n    outputRange: [1, 0.8],\r\n  });\r\n\r\n  const borderRadius = Animated.interpolateNode(progress, {\r\n    inputRange: [0, 1],\r\n    outputRange: [0, 26],\r\n  });\r\n\r\n  const animatedStyle = { borderRadius, transform: [{ scale }] };\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n      }}\r\n    >\r\n      <Drawer.Navigator\r\n        drawerType=\"slide\"\r\n        overlayColor=\"transparent\"\r\n        drawerStyle={{\r\n          flex: 1,\r\n          width: \"65%\",\r\n          paddingRight: 20,\r\n          backgroundColor: \"transparent\",\r\n        }}\r\n        sceneContainerStyle={{\r\n          backgroundColor: \"transparent\",\r\n        }}\r\n        screenOptions={{\r\n          headerShown: false,\r\n        }}\r\n        initialRouteName=\"MainLayout\"\r\n        drawerContent={(props) => {\r\n          setTimeout(() => {\r\n            setProgress(props.progress);\r\n          }, 0);\r\n\r\n          return (\r\n            <CustomDrawerContent\r\n              navigation={props.navigation}\r\n              selectedTab={selectedTab}\r\n              setSelectedTab={setSelectedTab}\r\n            />\r\n          );\r\n        }}\r\n      >\r\n        <Drawer.Screen name=\"MainLayout\"\r\n         \r\n        >\r\n          {(props) => (\r\n            <MainLayout {...props} drawerAnimationStyle={animatedStyle} />\r\n          )}\r\n        </Drawer.Screen>\r\n      </Drawer.Navigator>\r\n    </View>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    selectedTab: state.tabReducer.selectedTab,\r\n  };\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setSelectedTab: (selectedTab) => {\r\n      return dispatch(setSelectedTab(selectedTab));\r\n    },\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDrawer);\r\n"]},"metadata":{},"sourceType":"module"}